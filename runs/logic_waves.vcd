$date
	Sun Aug 17 11:40:59 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_logic_tb $end
$var wire 1 ! zero $end
$var wire 32 " y [31:0] $end
$var wire 1 # overflow $end
$var wire 1 $ negative $end
$var wire 1 % carry $end
$var parameter 4 & OP_AND $end
$var parameter 4 ' OP_OR $end
$var parameter 4 ( OP_XOR $end
$var parameter 32 ) W $end
$var reg 32 * a [31:0] $end
$var reg 32 + b [31:0] $end
$var reg 4 , op [3:0] $end
$scope module DTU $end
$var wire 32 - a [31:0] $end
$var wire 1 . add_ovf $end
$var wire 32 / b [31:0] $end
$var wire 4 0 op [3:0] $end
$var wire 1 1 sub_ovf $end
$var wire 1 ! zero $end
$var wire 33 2 sub_full [32:0] $end
$var wire 1 $ negative $end
$var wire 33 3 add_full [32:0] $end
$var parameter 4 4 OP_ADD $end
$var parameter 4 5 OP_AND $end
$var parameter 4 6 OP_OR $end
$var parameter 4 7 OP_SUB $end
$var parameter 4 8 OP_XOR $end
$var parameter 32 9 WIDTH $end
$var reg 1 % carry $end
$var reg 1 # overflow $end
$var reg 32 : y [31:0] $end
$upscope $end
$scope task t $end
$var reg 32 ; _a [31:0] $end
$var reg 32 < _b [31:0] $end
$var reg 4 = _op [3:0] $end
$var reg 32 > exp_y [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 9
b100 8
b1 7
b11 6
b10 5
b0 4
b100000 )
b100 (
b11 '
b10 &
$end
#0
$dumpvars
b111100000000000000000000 >
b10 =
b1111111100001111000011111111 <
b11110000111100000000000000000000 ;
b111100000000000000000000 :
b100000000111000001111000011111111 3
b111100000111111110000111100000001 2
01
b10 0
b1111111100001111000011111111 /
0.
b11110000111100000000000000000000 -
b10 ,
b1111111100001111000011111111 +
b11110000111100000000000000000000 *
0%
0$
0#
b111100000000000000000000 "
0!
$end
#1000
0!
b1111111111110000000011110000 "
b1111111111110000000011110000 :
b1111000011110000000000000000 +
b1111000011110000000000000000 /
b1111111111110000000011110000 3
b11110001111000010000000011110000 2
b111100000000000011110000 *
b111100000000000011110000 -
b11 ,
b11 0
b1111111111110000000011110000 >
b1111000011110000000000000000 <
b111100000000000011110000 ;
b11 =
#2000
1$
0!
b11111111000000001111111111111111 "
b11111111000000001111111111111111 :
b111111111111111111111111 +
b111111111111111111111111 /
b100000000111111101111111111111111 3
b111111110111111110000000000000001 2
b11111111111111110000000000000000 *
b11111111111111110000000000000000 -
b100 ,
b100 0
b11111111000000001111111111111111 >
b111111111111111111111111 <
b11111111111111110000000000000000 ;
b100 =
#3000
01
0$
1!
b0 "
b0 :
b11111111111111111111111111111111 +
b11111111111111111111111111111111 /
b11111111111111111111111111111111 3
b1 2
b0 *
b0 -
b10 ,
b10 0
b0 >
b11111111111111111111111111111111 <
b0 ;
b10 =
#4000
1$
0!
b10000000000000000000000000000000 "
b10000000000000000000000000000000 :
b0 +
b0 /
b10000000000000000000000000000000 3
b10000000000000000000000000000000 2
b10000000000000000000000000000000 *
b10000000000000000000000000000000 -
b11 ,
b11 0
b10000000000000000000000000000000 >
b0 <
b10000000000000000000000000000000 ;
b11 =
#6000
